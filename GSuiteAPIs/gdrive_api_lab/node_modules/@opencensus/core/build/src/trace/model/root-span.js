"use strict";
/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const logger = require("../../common/console-logger");
const no_record_span_1 = require("./no-record/no-record-span");
const span_1 = require("./span");
const span_base_1 = require("./span-base");
/** Defines a root span */
class RootSpan extends span_base_1.SpanBase {
    /**
     * Constructs a new RootSpanImpl instance.
     * @param tracer A tracer object.
     * @param name The displayed name for the new span.
     * @param kind The kind of new span.
     * @param traceId The trace Id.
     * @param parentSpanId The id of the parent span, or empty if the new span is
     *     a root span.
     * @param traceState An optional traceState.
     */
    constructor(tracer, name, kind, traceId, parentSpanId, traceState) {
        super();
        /** set isRootSpan = true */
        this.isRootSpan = true;
        this.tracer = tracer;
        this.traceIdLocal = traceId;
        this.name = name;
        this.kind = kind;
        this.parentSpanId = parentSpanId;
        if (traceState) {
            this.traceStateLocal = traceState;
        }
        this.spansLocal = [];
        this.logger = tracer.logger || logger.logger();
        this.activeTraceParams = tracer.activeTraceParams;
        this.numberOfChildrenLocal = 0;
    }
    /** Gets span list from rootspan instance. */
    get spans() {
        return this.spansLocal;
    }
    /** Gets trace id from rootspan instance. */
    get traceId() {
        return this.traceIdLocal;
    }
    /** Gets trace state from rootspan instance */
    get traceState() {
        return this.traceStateLocal;
    }
    /** Gets the number of child span created for this span. */
    get numberOfChildren() {
        return this.numberOfChildrenLocal;
    }
    /** Starts a rootspan instance. */
    start() {
        super.start();
        this.logger.debug('starting %s  %o', this.className, {
            traceId: this.traceId,
            id: this.id,
            parentSpanId: this.parentSpanId,
            traceState: this.traceState
        });
        this.tracer.onStartSpan(this);
    }
    /** Ends a rootspan instance. */
    end() {
        super.end();
        for (const span of this.spansLocal) {
            if (!span.ended && span.started) {
                span.truncate();
            }
        }
        this.tracer.onEndSpan(this);
    }
    /**
     * Starts a new child span in the root span.
     * @param nameOrOptions Span name string or SpanOptions object.
     * @param kind Span kind if not using SpanOptions object.
     */
    startChildSpan(nameOrOptions, kind) {
        if (this.ended) {
            this.logger.debug('calling %s.startSpan() on ended %s %o', this.className, this.className, { id: this.id, name: this.name, kind: this.kind });
            return new no_record_span_1.NoRecordSpan();
        }
        if (!this.started) {
            this.logger.debug('calling %s.startSpan() on un-started %s %o', this.className, this.className, { id: this.id, name: this.name, kind: this.kind });
            return new no_record_span_1.NoRecordSpan();
        }
        this.numberOfChildrenLocal++;
        const child = new span_1.Span(this);
        const spanName = typeof nameOrOptions === 'object' ? nameOrOptions.name : nameOrOptions;
        const spanKind = typeof nameOrOptions === 'object' ? nameOrOptions.kind : kind;
        if (spanName)
            child.name = spanName;
        if (spanKind)
            child.kind = spanKind;
        child.start();
        this.spansLocal.push(child);
        return child;
    }
}
exports.RootSpan = RootSpan;
//# sourceMappingURL=root-span.js.map