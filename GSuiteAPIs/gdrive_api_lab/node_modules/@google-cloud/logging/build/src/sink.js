"use strict";
/*!
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const common = require("@google-cloud/common-grpc");
const promisify_1 = require("@google-cloud/promisify");
const extend = require("extend");
/**
 * A sink is an object that lets you to specify a set of log entries to export
 * to a particular destination. Stackdriver Logging lets you export log entries
 * to destinations including Cloud Storage buckets (for long term log
 * storage), Google BigQuery datasets (for log analysis), Google Pub/Sub (for
 * streaming to other applications).
 *
 * @see [Introduction to Sinks]{@link https://cloud.google.com/logging/docs/basic-concepts#sinks}
 *
 * @class
 *
 * @param {Logging} logging {@link Logging} instance.
 * @param {string} name Name of the sink.
 *
 * @example
 * const {Logging} = require('@google-cloud/logging');
 * const logging = new Logging();
 * const sink = logging.sink('my-sink');
 */
class Sink {
    constructor(logging, name) {
        this.logging = logging;
        /**
         * @name Sink#name
         * @type {string}
         */
        this.name = name;
        this.formattedName_ = 'projects/' + logging.projectId + '/sinks/' + name;
    }
    create(config, callback) {
        this.logging.createSink(this.name, config, callback);
    }
    delete(gaxOptions, callback) {
        if (typeof gaxOptions === 'function') {
            callback = gaxOptions;
            gaxOptions = {};
        }
        const reqOpts = {
            sinkName: this.formattedName_,
        };
        this.logging.request({
            client: 'ConfigServiceV2Client',
            method: 'deleteSink',
            reqOpts,
            gaxOpts: gaxOptions,
        }, callback);
    }
    getMetadata(gaxOptions, callback) {
        const self = this;
        if (typeof gaxOptions === 'function') {
            callback = gaxOptions;
            gaxOptions = {};
        }
        const reqOpts = {
            sinkName: this.formattedName_,
        };
        this.logging.request({
            client: 'ConfigServiceV2Client',
            method: 'getSink',
            reqOpts,
            gaxOpts: gaxOptions,
        }, (...args) => {
            if (args[1]) {
                self.metadata = args[1];
            }
            callback.apply(null, args);
        });
    }
    setFilter(filter, callback) {
        this.setMetadata({
            filter,
        }, callback);
    }
    setMetadata(metadata, callback) {
        const self = this;
        callback = callback || common.util.noop;
        this.getMetadata((err, currentMetadata) => {
            if (err) {
                callback(err);
                return;
            }
            const reqOpts = {
                sinkName: self.formattedName_,
                sink: extend({}, currentMetadata, metadata),
            };
            delete reqOpts.sink.gaxOptions;
            self.logging.request({
                client: 'ConfigServiceV2Client',
                method: 'updateSink',
                reqOpts,
                gaxOpts: metadata.gaxOptions,
            }, (...args) => {
                if (args[1]) {
                    self.metadata = args[1];
                }
                callback.apply(null, args);
            });
        });
    }
}
exports.Sink = Sink;
/*! Developer Documentation
 *
 * All async methods (except for streams) will return a Promise in the event
 * that a callback is omitted.
 */
promisify_1.promisifyAll(Sink);
//# sourceMappingURL=sink.js.map